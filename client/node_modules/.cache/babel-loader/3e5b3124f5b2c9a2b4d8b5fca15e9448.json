{"remainingRequest":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\15803\\Documents\\hw6\\client\\src\\comps\\login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\src\\comps\\login.vue","mtime":1650941130861},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650903164488},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1650903165336},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650903164488},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1650903166757}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//import\nimport bridge from '../bridge.js';\nimport references from '../utils/references.js';\nimport user from './user.vue';\nimport toastr from 'toastr'; //master\n\nexport default {\n  //name\n  name: 'login',\n  //components\n  components: {\n    user\n  },\n\n  //cycle methods\n  //created\n  async created() {\n    //init timeout \n    setTimeout(() => {\n      $('#firstFocus').focus();\n      $('#loginIcon').addClass(references.getIcon('login'));\n      $('#accountIcon').addClass(references.getIcon('user'));\n      $('#passwordIcon').addClass(references.getIcon('password'));\n    }, 0); //CRUD examples (for reference only)\n    //create\n\n    await bridge.setDocument({\n      collection: `users`,\n      item: {\n        _id: `id01`,\n        field01: `field01`,\n        field02: `field02`,\n        field03: `field03`\n      }\n    }); //read\n\n    let read = await bridge.getDocument({\n      collection: `users`,\n      item: {\n        _id: `id01`\n      }\n    });\n    console.log(read); //update\n\n    await bridge.setDocument({\n      collection: `users`,\n      item: {\n        _id: `id01`,\n        field01: `modedField01`,\n        field02: `modedField02`,\n        field03: `modedField03`\n      }\n    }); //delete\n\n    await bridge.deleteDocument({\n      collection: `users`,\n      item: {\n        _id: `id01`\n      }\n    });\n  },\n\n  //custom methods\n  methods: {\n    //login\n    async login() {\n      //validate entries\n      if (!this.$refs.form.validate()) {\n        return;\n      } //get access token\n\n\n      let token = await bridge.getToken({\n        collection: `users`,\n        item: {\n          _id: this.username,\n          fruit: this.fruit\n        }\n      }); //notify based on the token\n\n      if (token == \"user doesn't exist\") {\n        toastr.error(`Username does not exist!`, ``, {\n          'closeButton': true,\n          positionClass: 'toast-bottom-right'\n        });\n        this.numFailedLogins++;\n\n        if (this.numFailedLogins >= 5) {\n          this.flag = false;\n          toastr.error(`Too many login attempts have been made!`, ``, {\n            'closeButton': true,\n            positionClass: 'toast-bottom-right'\n          });\n        }\n      } else if (token == \"invalid password\") {\n        toastr.error(`Password is incorrect!`, ``, {\n          'closeButton': true,\n          positionClass: 'toast-bottom-right'\n        });\n        this.numFailedLogins++;\n\n        if (this.numFailedLogins >= 5) {\n          this.flag = false;\n          toastr.error(`Too many login attempts have been made!`, ``, {\n            'closeButton': true,\n            positionClass: 'toast-bottom-right'\n          });\n        }\n      } //redirect if successful token\n      else {\n          this.$router.push({\n            path: `/dashboard/${this.username}`\n          });\n          this.numFailedLogins = 0;\n          this.flag = true;\n        }\n    },\n\n    //create account\n    register() {\n      this.dialogs.user.show = true;\n    },\n\n    //forgot password\n    recover() {\n      toastr.info(`Ignore this button, no coding required here!`, ``, {\n        'closeButton': true,\n        positionClass: 'toast-bottom-right'\n      });\n    },\n\n    //dialogs\n    async closeDialog(params, type) {\n      this.dialogs[type].show = false; //save user to database\n\n      if (params.action == \"submit\") {\n        await bridge.setUser({\n          collection: `users`,\n          item: {\n            _id: params.data.username,\n            fruit: params.data.fruit\n          }\n        }); //notify\n\n        toastr.success(`Account successfully created!`, ``, {\n          'closeButton': true,\n          positionClass: `toast-bottom-right`\n        });\n      }\n    }\n\n  },\n  //global vars\n  data: () => ({\n    // tracks number of failed logins\n    numFailedLogins: 0,\n    // flag is set to false when numFailedLogins >= 5\n    flag: true,\n    username: '',\n    fruit: '',\n    user: {},\n    validate: {\n      required: a => !!a || 'Entry required!'\n    },\n    params: {},\n    dialogs: {\n      user: {\n        show: false\n      }\n    }\n  })\n};",{"version":3,"sources":["login.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<v-app style='background-image: linear-gradient(to bottom right, #009dff, #003dbf);'>\n<!--dialogs-->\n\t<transition name=\"fade\">\n\t\t<user \n\t\t\t:data='user' \n\t\t\t:params='params'\n\t\t\tv-if='dialogs.user.show'\n\t\t\t@closeDialog='closeDialog($event, \"user\")'>\n\t\t</user>\n\t</transition>\n<!--card-->\n\t<v-form ref='form' lazy-validation><!--required for this.$refs.form.validate()-->\n\t<v-card elevation='2' style='width: 450px; text-align: center; margin: 150px auto auto auto;' class='dizagara-outline-blue'>\n\t\t<!--logo-->\n\t\t\t<div style='margin: 50px;'>\n\t\t\t\t<strong style='font-weight: bolder; font-size: 25px; color: gray; text-align: center;'>\n\t\t\t\t\t<i class='fa fa-fw fa-bars'></i>FULL-STACK\n\t\t\t\t</strong>\n\t\t\t</div>\n\t\t<!--username textbox-->\n\t\t\t<v-text-field dense outlined\n\t\t\t\tid='firstFocus'\n\t\t\t\tappend-icon='mdi-account-circle'\n\t\t\t\tlabel='Username'\n\t\t\t\t:rules='[validate.required]'\n\t\t\t\tplaceholder='Type username...'\n\t\t\t\tv-model='username'\n\t\t\t\tautocomplete='off'\n\t\t\t\tbackground-color='light-blue lighten-5'\n\t\t\t\tstyle='margin-left: 30px; margin-right: 30px;'\n\t\t\t></v-text-field>\n\t\t<!--password textbox-->\n\t\t\t<v-text-field dense outlined\n\t\t\t\tappend-icon='mdi-lock'\n\t\t\t\tlabel='Password'\n\t\t\t\t:rules='[validate.required]'\n\t\t\t\tplaceholder='Type password...'\n\t\t\t\tv-model='fruit'\n\t\t\t\ttype='password'\n\t\t\t\tautocomplete=\"off\"\n\t\t\t\tbackground-color='light-blue lighten-5'\n\t\t\t\tstyle='margin-left: 30px; margin-right: 30px;'\n\t\t\t></v-text-field>\n\t<!--action buttons-->\n\t\t<v-card-actions style = 'background-color: #2655a9 !important; padding-bottom: 0px;'>\n\t\t\t<v-card-text v-on:keyup.enter='login()'>\n\t\t\t<!--login button-->\n\t\t\t\t<v-btn v-if=\"this.flag\" dense class='dizagara-button-blue'\n\t\t\t\t\tstyle='width: 100%; margin: 0px 0px 10px 0px; font-weight: bold;'\n\t\t\t\t\t@click='login()'>\n\t\t\t\t\t<span v-if=\"this.flag\" class='mdi' id='loginIcon'></span>\n\t\t\t\t\tLOGIN\n\t\t\t\t</v-btn>\n\t\t\t\t<v-row class = \"align-center\">\n\t\t\t<!--register button-->\n\t\t\t\t<v-btn small class='dizagara-button-blue'\n\t\t\t\t\tstyle='margin: 10px; width: 190px' \n\t\t\t\t\t@click=\"register()\" \n\t\t\t\t\ttitle='Create an account'>\n\t\t\t\t\t<span class='mdi' id='accountIcon'></span>\n\t\t\t\t\tREGISTER\n\t\t\t\t</v-btn>\n\t\t\t<!--recover password-->\n\t\t\t\t<v-btn small class='dizagara-button-blue'\n\t\t\t\t\tstyle='margin: 10px; width: 190px;' \n\t\t\t\t\t@click='recover()' \n\t\t\t\t\ttitle='Recover your password.'>\n\t\t\t\t\t<span class='mdi' id='passwordIcon'></span>\n\t\t\t\t\tPASSWORD\n\t\t\t\t</v-btn>\n\t\t\t\t</v-row>\n\t\t\t</v-card-text>\n\t\t</v-card-actions>\n\t\t</v-card>\n\t\t</v-form>\n\t</v-app>\n</template>\n<script>\n//import\n\timport bridge from '../bridge.js';\n\timport references from '../utils/references.js';\n\timport user from './user.vue';\n\timport toastr from 'toastr';\n\n//master\n    export default {\n//name\n\tname: 'login',\n//components\n\tcomponents: {\n\t\tuser\n\t},\n//cycle methods\n\t//created\n\t\tasync created(){\n\t\t//init timeout \n\t\t\tsetTimeout(() => {\n\t\t\t\t$('#firstFocus').focus();\n\t\t\t\t$('#loginIcon').addClass(references.getIcon('login'));\n\t\t\t\t$('#accountIcon').addClass(references.getIcon('user'));\n\t\t\t\t$('#passwordIcon').addClass(references.getIcon('password'));\n\t\t\t}, 0);\n\t\t//CRUD examples (for reference only)\n\t\t\t//create\n\t\t\t\tawait bridge.setDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`,\n\t\t\t\t\t\tfield01: `field01`,\n\t\t\t\t\t\tfield02: `field02`,\n\t\t\t\t\t\tfield03: `field03`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//read\n\t\t\t\tlet read = await bridge.getDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconsole.log(read);\n\t\t\t//update\n\t\t\t\tawait bridge.setDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`,\n\t\t\t\t\t\tfield01: `modedField01`,\n\t\t\t\t\t\tfield02: `modedField02`,\n\t\t\t\t\t\tfield03: `modedField03`\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t//delete\n\t\t\t\tawait bridge.deleteDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n//custom methods\n\tmethods: {\n\t//login\n\t\tasync login(){\n\t\t\t//validate entries\n\t\t\t\tif(!this.$refs.form.validate()){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t//get access token\n\t\t\t\tlet token = await bridge.getToken({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: this.username,\n\t\t\t\t\t\tfruit: this.fruit\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//notify based on the token\n\t\t\t\tif (token == \"user doesn't exist\") {\n\t\t\t\t\ttoastr.error(`Username does not exist!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\tthis.numFailedLogins++;\n\t\t\t\t\tif (this.numFailedLogins >= 5) {\n\t\t\t\t\t\tthis.flag = false;\n\t\t\t\t\t\ttoastr.error(`Too many login attempts have been made!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (token == \"invalid password\") {\n\t\t\t\t\ttoastr.error(`Password is incorrect!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\tthis.numFailedLogins++;\n\t\t\t\t\tif (this.numFailedLogins >= 5) {\n\t\t\t\t\t\tthis.flag = false;\n\t\t\t\t\t\ttoastr.error(`Too many login attempts have been made!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//redirect if successful token\n\t\t\t\telse {\n\t\t\t\t\tthis.$router.push({ path: `/dashboard/${this.username}`});\n\t\t\t\t\tthis.numFailedLogins = 0;\n\t\t\t\t\tthis.flag = true;\n\t\t\t\t}\n\t\t},\n\t//create account\n\t\tregister(){\n\t\t\tthis.dialogs.user.show = true;\n\t\t},\n\t//forgot password\n\t\trecover(){\n\t\t\ttoastr.info(`Ignore this button, no coding required here!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t},\n\t//dialogs\n\t\tasync closeDialog(params, type){\n\t\t\tthis.dialogs[type].show = false;\n\t\t\t//save user to database\n\t\t\tif (params.action == \"submit\") {\n\t\t\t\tawait bridge.setUser({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: params.data.username,\n\t\t\t\t\t\tfruit: params.data.fruit,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//notify\n\t\t\t\ttoastr.success(`Account successfully created!`, ``, {'closeButton': true, positionClass: `toast-bottom-right`});\n\t\t\t}\n\t\t}\n\t},\n//global vars\n\tdata: () => ({\n\t// tracks number of failed logins\n\t\tnumFailedLogins: 0,\n\t// flag is set to false when numFailedLogins >= 5\n\t\tflag: true,\n\t\tusername: '',\n\t\tfruit: '',\n\t\tuser: {},\n\t\tvalidate: {\n\t\t\trequired: a => !!a || 'Entry required!'\n\t\t},\n\t\tparams: {},\n\t\tdialogs: {\n\t\t\tuser: {\n\t\t\t\tshow: false\n\t\t\t}\n\t\t}\n\t}),\n}\n</script>"],"sourceRoot":"src/comps"}]}