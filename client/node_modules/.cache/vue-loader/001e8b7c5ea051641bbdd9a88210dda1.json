{"remainingRequest":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\15803\\Documents\\hw6\\client\\src\\comps\\login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\src\\comps\\login.vue","mtime":1650941130861},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650903164488},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1650903165336},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650903164488},{"path":"C:\\Users\\15803\\Documents\\hw6\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1650903166757}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//import\n\timport bridge from '../bridge.js';\n\timport references from '../utils/references.js';\n\timport user from './user.vue';\n\timport toastr from 'toastr';\n\n//master\n    export default {\n//name\n\tname: 'login',\n//components\n\tcomponents: {\n\t\tuser\n\t},\n//cycle methods\n\t//created\n\t\tasync created(){\n\t\t//init timeout \n\t\t\tsetTimeout(() => {\n\t\t\t\t$('#firstFocus').focus();\n\t\t\t\t$('#loginIcon').addClass(references.getIcon('login'));\n\t\t\t\t$('#accountIcon').addClass(references.getIcon('user'));\n\t\t\t\t$('#passwordIcon').addClass(references.getIcon('password'));\n\t\t\t}, 0);\n\t\t//CRUD examples (for reference only)\n\t\t\t//create\n\t\t\t\tawait bridge.setDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`,\n\t\t\t\t\t\tfield01: `field01`,\n\t\t\t\t\t\tfield02: `field02`,\n\t\t\t\t\t\tfield03: `field03`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//read\n\t\t\t\tlet read = await bridge.getDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconsole.log(read);\n\t\t\t//update\n\t\t\t\tawait bridge.setDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`,\n\t\t\t\t\t\tfield01: `modedField01`,\n\t\t\t\t\t\tfield02: `modedField02`,\n\t\t\t\t\t\tfield03: `modedField03`\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t//delete\n\t\t\t\tawait bridge.deleteDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n//custom methods\n\tmethods: {\n\t//login\n\t\tasync login(){\n\t\t\t//validate entries\n\t\t\t\tif(!this.$refs.form.validate()){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t//get access token\n\t\t\t\tlet token = await bridge.getToken({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: this.username,\n\t\t\t\t\t\tfruit: this.fruit\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//notify based on the token\n\t\t\t\tif (token == \"user doesn't exist\") {\n\t\t\t\t\ttoastr.error(`Username does not exist!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\tthis.numFailedLogins++;\n\t\t\t\t\tif (this.numFailedLogins >= 5) {\n\t\t\t\t\t\tthis.flag = false;\n\t\t\t\t\t\ttoastr.error(`Too many login attempts have been made!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (token == \"invalid password\") {\n\t\t\t\t\ttoastr.error(`Password is incorrect!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\tthis.numFailedLogins++;\n\t\t\t\t\tif (this.numFailedLogins >= 5) {\n\t\t\t\t\t\tthis.flag = false;\n\t\t\t\t\t\ttoastr.error(`Too many login attempts have been made!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//redirect if successful token\n\t\t\t\telse {\n\t\t\t\t\tthis.$router.push({ path: `/dashboard/${this.username}`});\n\t\t\t\t\tthis.numFailedLogins = 0;\n\t\t\t\t\tthis.flag = true;\n\t\t\t\t}\n\t\t},\n\t//create account\n\t\tregister(){\n\t\t\tthis.dialogs.user.show = true;\n\t\t},\n\t//forgot password\n\t\trecover(){\n\t\t\ttoastr.info(`Ignore this button, no coding required here!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t},\n\t//dialogs\n\t\tasync closeDialog(params, type){\n\t\t\tthis.dialogs[type].show = false;\n\t\t\t//save user to database\n\t\t\tif (params.action == \"submit\") {\n\t\t\t\tawait bridge.setUser({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: params.data.username,\n\t\t\t\t\t\tfruit: params.data.fruit,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//notify\n\t\t\t\ttoastr.success(`Account successfully created!`, ``, {'closeButton': true, positionClass: `toast-bottom-right`});\n\t\t\t}\n\t\t}\n\t},\n//global vars\n\tdata: () => ({\n\t// tracks number of failed logins\n\t\tnumFailedLogins: 0,\n\t// flag is set to false when numFailedLogins >= 5\n\t\tflag: true,\n\t\tusername: '',\n\t\tfruit: '',\n\t\tuser: {},\n\t\tvalidate: {\n\t\t\trequired: a => !!a || 'Entry required!'\n\t\t},\n\t\tparams: {},\n\t\tdialogs: {\n\t\t\tuser: {\n\t\t\t\tshow: false\n\t\t\t}\n\t\t}\n\t}),\n}\n",{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"login.vue","sourceRoot":"src/comps","sourcesContent":["<template>\n<v-app style='background-image: linear-gradient(to bottom right, #009dff, #003dbf);'>\n<!--dialogs-->\n\t<transition name=\"fade\">\n\t\t<user \n\t\t\t:data='user' \n\t\t\t:params='params'\n\t\t\tv-if='dialogs.user.show'\n\t\t\t@closeDialog='closeDialog($event, \"user\")'>\n\t\t</user>\n\t</transition>\n<!--card-->\n\t<v-form ref='form' lazy-validation><!--required for this.$refs.form.validate()-->\n\t<v-card elevation='2' style='width: 450px; text-align: center; margin: 150px auto auto auto;' class='dizagara-outline-blue'>\n\t\t<!--logo-->\n\t\t\t<div style='margin: 50px;'>\n\t\t\t\t<strong style='font-weight: bolder; font-size: 25px; color: gray; text-align: center;'>\n\t\t\t\t\t<i class='fa fa-fw fa-bars'></i>FULL-STACK\n\t\t\t\t</strong>\n\t\t\t</div>\n\t\t<!--username textbox-->\n\t\t\t<v-text-field dense outlined\n\t\t\t\tid='firstFocus'\n\t\t\t\tappend-icon='mdi-account-circle'\n\t\t\t\tlabel='Username'\n\t\t\t\t:rules='[validate.required]'\n\t\t\t\tplaceholder='Type username...'\n\t\t\t\tv-model='username'\n\t\t\t\tautocomplete='off'\n\t\t\t\tbackground-color='light-blue lighten-5'\n\t\t\t\tstyle='margin-left: 30px; margin-right: 30px;'\n\t\t\t></v-text-field>\n\t\t<!--password textbox-->\n\t\t\t<v-text-field dense outlined\n\t\t\t\tappend-icon='mdi-lock'\n\t\t\t\tlabel='Password'\n\t\t\t\t:rules='[validate.required]'\n\t\t\t\tplaceholder='Type password...'\n\t\t\t\tv-model='fruit'\n\t\t\t\ttype='password'\n\t\t\t\tautocomplete=\"off\"\n\t\t\t\tbackground-color='light-blue lighten-5'\n\t\t\t\tstyle='margin-left: 30px; margin-right: 30px;'\n\t\t\t></v-text-field>\n\t<!--action buttons-->\n\t\t<v-card-actions style = 'background-color: #2655a9 !important; padding-bottom: 0px;'>\n\t\t\t<v-card-text v-on:keyup.enter='login()'>\n\t\t\t<!--login button-->\n\t\t\t\t<v-btn v-if=\"this.flag\" dense class='dizagara-button-blue'\n\t\t\t\t\tstyle='width: 100%; margin: 0px 0px 10px 0px; font-weight: bold;'\n\t\t\t\t\t@click='login()'>\n\t\t\t\t\t<span v-if=\"this.flag\" class='mdi' id='loginIcon'></span>\n\t\t\t\t\tLOGIN\n\t\t\t\t</v-btn>\n\t\t\t\t<v-row class = \"align-center\">\n\t\t\t<!--register button-->\n\t\t\t\t<v-btn small class='dizagara-button-blue'\n\t\t\t\t\tstyle='margin: 10px; width: 190px' \n\t\t\t\t\t@click=\"register()\" \n\t\t\t\t\ttitle='Create an account'>\n\t\t\t\t\t<span class='mdi' id='accountIcon'></span>\n\t\t\t\t\tREGISTER\n\t\t\t\t</v-btn>\n\t\t\t<!--recover password-->\n\t\t\t\t<v-btn small class='dizagara-button-blue'\n\t\t\t\t\tstyle='margin: 10px; width: 190px;' \n\t\t\t\t\t@click='recover()' \n\t\t\t\t\ttitle='Recover your password.'>\n\t\t\t\t\t<span class='mdi' id='passwordIcon'></span>\n\t\t\t\t\tPASSWORD\n\t\t\t\t</v-btn>\n\t\t\t\t</v-row>\n\t\t\t</v-card-text>\n\t\t</v-card-actions>\n\t\t</v-card>\n\t\t</v-form>\n\t</v-app>\n</template>\n<script>\n//import\n\timport bridge from '../bridge.js';\n\timport references from '../utils/references.js';\n\timport user from './user.vue';\n\timport toastr from 'toastr';\n\n//master\n    export default {\n//name\n\tname: 'login',\n//components\n\tcomponents: {\n\t\tuser\n\t},\n//cycle methods\n\t//created\n\t\tasync created(){\n\t\t//init timeout \n\t\t\tsetTimeout(() => {\n\t\t\t\t$('#firstFocus').focus();\n\t\t\t\t$('#loginIcon').addClass(references.getIcon('login'));\n\t\t\t\t$('#accountIcon').addClass(references.getIcon('user'));\n\t\t\t\t$('#passwordIcon').addClass(references.getIcon('password'));\n\t\t\t}, 0);\n\t\t//CRUD examples (for reference only)\n\t\t\t//create\n\t\t\t\tawait bridge.setDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`,\n\t\t\t\t\t\tfield01: `field01`,\n\t\t\t\t\t\tfield02: `field02`,\n\t\t\t\t\t\tfield03: `field03`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//read\n\t\t\t\tlet read = await bridge.getDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconsole.log(read);\n\t\t\t//update\n\t\t\t\tawait bridge.setDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`,\n\t\t\t\t\t\tfield01: `modedField01`,\n\t\t\t\t\t\tfield02: `modedField02`,\n\t\t\t\t\t\tfield03: `modedField03`\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t//delete\n\t\t\t\tawait bridge.deleteDocument({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: `id01`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t},\n//custom methods\n\tmethods: {\n\t//login\n\t\tasync login(){\n\t\t\t//validate entries\n\t\t\t\tif(!this.$refs.form.validate()){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t//get access token\n\t\t\t\tlet token = await bridge.getToken({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: this.username,\n\t\t\t\t\t\tfruit: this.fruit\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//notify based on the token\n\t\t\t\tif (token == \"user doesn't exist\") {\n\t\t\t\t\ttoastr.error(`Username does not exist!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\tthis.numFailedLogins++;\n\t\t\t\t\tif (this.numFailedLogins >= 5) {\n\t\t\t\t\t\tthis.flag = false;\n\t\t\t\t\t\ttoastr.error(`Too many login attempts have been made!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (token == \"invalid password\") {\n\t\t\t\t\ttoastr.error(`Password is incorrect!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\tthis.numFailedLogins++;\n\t\t\t\t\tif (this.numFailedLogins >= 5) {\n\t\t\t\t\t\tthis.flag = false;\n\t\t\t\t\t\ttoastr.error(`Too many login attempts have been made!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t//redirect if successful token\n\t\t\t\telse {\n\t\t\t\t\tthis.$router.push({ path: `/dashboard/${this.username}`});\n\t\t\t\t\tthis.numFailedLogins = 0;\n\t\t\t\t\tthis.flag = true;\n\t\t\t\t}\n\t\t},\n\t//create account\n\t\tregister(){\n\t\t\tthis.dialogs.user.show = true;\n\t\t},\n\t//forgot password\n\t\trecover(){\n\t\t\ttoastr.info(`Ignore this button, no coding required here!`, ``, {'closeButton': true, positionClass: 'toast-bottom-right'});\n\t\t},\n\t//dialogs\n\t\tasync closeDialog(params, type){\n\t\t\tthis.dialogs[type].show = false;\n\t\t\t//save user to database\n\t\t\tif (params.action == \"submit\") {\n\t\t\t\tawait bridge.setUser({\n\t\t\t\t\tcollection: `users`,\n\t\t\t\t\titem: {\n\t\t\t\t\t\t_id: params.data.username,\n\t\t\t\t\t\tfruit: params.data.fruit,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t//notify\n\t\t\t\ttoastr.success(`Account successfully created!`, ``, {'closeButton': true, positionClass: `toast-bottom-right`});\n\t\t\t}\n\t\t}\n\t},\n//global vars\n\tdata: () => ({\n\t// tracks number of failed logins\n\t\tnumFailedLogins: 0,\n\t// flag is set to false when numFailedLogins >= 5\n\t\tflag: true,\n\t\tusername: '',\n\t\tfruit: '',\n\t\tuser: {},\n\t\tvalidate: {\n\t\t\trequired: a => !!a || 'Entry required!'\n\t\t},\n\t\tparams: {},\n\t\tdialogs: {\n\t\t\tuser: {\n\t\t\t\tshow: false\n\t\t\t}\n\t\t}\n\t}),\n}\n</script>"]}]}